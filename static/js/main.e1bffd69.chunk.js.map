{"version":3,"sources":["App.js","lib/web3.js","components/Header.js","components/Service.js","components/About.js","assets/img/tree.png","components/Marketplace.js","components/Leaf.js","index.js"],"names":["App","nftContract","className","walletAddress","id_network","opcode_network","init","a","console","log","window","ethereum","on","accounts","location","reload","network","connectWallet","request","method","then","web3","Web3","eth","getChainId","catch","err","switchChain","params","chainId","checkNetwork","checkConnection","getAccounts","addr","initContract","Contract","NFTcontractBuild","request_mintNft","counter","price","operand","methods","claim","from","value","utils","toWei","toString","send","error","code","type","maxFeePerGas","maxPriorityFeePerGas","request_totalSupply","totalSupply","call","request_nftLimit","MAX_MINTABLE","request_nftPrice","NFT_PRICE","fromWei","getTokensByAddress","address","tokensByAddress","array","getTokenURI","param","tokenURI","response","Header","useState","setAddress","setnetwork","useEffect","checkAddress","checkNetwork1","switchNetwork","storeAddress","disconnect","Navbar","bg","expand","to","Brand","Toggle","Collapse","id","Nav","Link","Button","onClick","substr","service","About","NFT","setTotalSupply","limit","setLimit","setPrice","loading","setLoading","list","setlist","nftList","setnftList","getPrice","getLimit","getTotalSupply","getTokens","getMetadatas","ok","i","length","axios","get","responseType","push","data","total","mint","urls","forEach","element","responseFormat","Container","Row","map","item","Col","xs","md","lg","style","marginTop","Card","Img","variant","src","image","Body","Title","name","Text","description","width","tree","disabled","Leaf","ReactDOM","render","StrictMode","exact","path","component","Service","Marketplace","document","getElementById"],"mappings":"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","file":"static/js/main.e1bffd69.chunk.js","sourcesContent":["import './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>This is Homepage</h1>\n    </div>\n  );\n}\n\nexport default App;\n","import Web3 from 'web3'\nimport NFTcontractBuild from './NFTcontract_abi.json'\n\nvar walletAddress = ''\nvar network= '';\nlet nftContract;\n\n// testnet 43113\n// mainnet 43114\n// ganache 1337\n\n// ganache 1\n// testnet 0xa869\n// mainnet 0xa86a\n\nconst id_network = '43113'\nconst opcode_network = '0xa869'\n\nexport const init = async () => {\n  console.log('init')\n  if (typeof window.ethereum !== 'undefined') {\n    window.ethereum.on('accountsChanged', function (accounts) {\n      if (accounts[0]) {\n        console.log('connected', accounts[0])\n        walletAddress = accounts[0]\n      } else {\n        console.log('not connected')\n      }\n      window.location.reload();\n    })\n\n    window.ethereum.on('chainChanged', function (network) {\n        if (network == opcode_network) {\n            network = \"avax\"\n        } else {\n            network = \"not-avax\"\n        }\n      window.location.reload();\n\n    })\n\n    window.ethereum.on('disconnect', function () {\n      console.log(\"disconnected\")\n      window.location.reload();\n    })\n  } else {\n    console.log('no-metamask')\n    return false\n  }\n}\n\nexport const connectWallet = async () => {\n  await window.ethereum\n    .request({\n      method: 'eth_requestAccounts',\n    })\n    .then(async (accounts) => {\n      if (accounts[0]) {\n        let web3 = new Web3(window.ethereum)\n        await web3.eth.getChainId().then(async (network) => {\n          if (network == id_network) {\n            network = \"avax\"\n          } else {\n            network = \"not-avax\"\n          }\n        })\n          walletAddress = accounts[0]\n      } else {\n        return []\n      }\n    })\n    .catch((err) => {\n      console.log(err)\n      return\n    })\n    return walletAddress\n\n}\n\nexport const switchChain = async () => {\n  await window.ethereum\n    .request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId: opcode_network }],\n    })\n    .catch((err) => {\n      console.log(err)\n      return\n    })\n    window.location.reload();\n\n}\n\nexport const checkNetwork = async () => {\n  // Check if browser is running Metamask\n  let web3\n  if (window.ethereum) {\n    web3 = new Web3(window.ethereum)\n\n\n    // Check if User is already connected by retrieving the accounts\n    return await web3.eth.getChainId().then(async (network) => {\n      if (network == id_network) {\n        network = \"avax\"\n      } else {\n        network = \"not-avax\"\n      }\n      return network \n    })\n    \n    \n  }\n}\n\nexport const checkConnection = async () => {\n  // Check if browser is running Metamask\n  let web3\n  if (window.ethereum) {\n    web3 = new Web3(window.ethereum)\n\n    await web3.eth.getChainId().then(async (network) => {\n      if (network == id_network ) {\n        network = \"avax\"\n      } else {\n        network = \"not-avax\"\n      }\n    })\n    \n    // Check if User is already connected by retrieving the accounts\n    await web3.eth.getAccounts().then(async (addr) => {\n      if (addr[0]) {\n        walletAddress = addr[0]\n      } else {\n          walletAddress = \"\"\n      }\n      \n    })\n    \n    return walletAddress\n\n  }\n}\n\n///////////   NFT Contract  ///////////\nexport const initContract = async () => {\n  const web3 = new Web3(window.ethereum)\n\n  nftContract = new web3.eth.Contract(\n        NFTcontractBuild,\n        \"0x5AABc8481797bc3486C75B20108b01761Be2B5dA\"\n    )\n}\n\nexport const canClaim = async () => {\n  await initContract()\n  return await nftContract.methods.canClaim().call()\n}\n\nexport const toggleClaim = async (addr) => {\n  await initContract()\n\n  let operand = nftContract.methods.toggleClaimability()\n  let params = { from: addr };\n\n  return await operand.send(params)\n  .on('error', function (error) {\n      if (error.code === -32602) {\n          params.type = \"0x0\";\n          params.maxFeePerGas = null;\n          params.maxPriorityFeePerGas= null;\n          operand.send(params).on(\"error\", function() {\n            console.log('error', error)\n          }).then( async function(){\n            const result = await canClaim()\n            return result\n          })\n      }else {\n        console.log('error', error)\n      }\n  }).then( async function(){\n      const result = await canClaim()\n      return result\n  }) \n\n}\n\nexport const request_mintNft = async (counter, price) => {\n  await initContract()\n  const web3 = new Web3(window.ethereum)\n\n    let operand = nftContract.methods.claim(counter)\n    let params = { from: walletAddress, value: web3.utils.toWei((price * counter).toString(), 'ether')};\n\n    await operand.send(params)\n    .on('error', function (error) {\n        if (error.code === -32602) {\n            params.type = \"0x0\";\n            params.maxFeePerGas = null;\n            params.maxPriorityFeePerGas= null;\n            operand.send(params).on(\"error\", function() {})\n        }\n        \n    }).then(function(){\n      return false\n    }) \n    \n}\n\nexport const withdraw = async () => {\n  await initContract()\n  // mettre spinner dans ui avec True en param\n\n  let operand = nftContract.methods.withdraw()\n  let params = { from: walletAddress };\n\n  return await operand.send(params)\n  .on('error', function (error) {\n      if (error.code == -32602) {\n          params.type = \"0x0\";\n          params.maxFeePerGas = null;\n          params.maxPriorityFeePerGas= null;\n          operand.send(params).on(\"error\", function() {\n              return false\n          }).then( function(){\n            return false\n          })\n      }else {\n          return false\n      }\n  }).then(function(){\n    return false\n  }) \n  \n}\n\nexport const withdrawBalance = async () => {\n  await initContract();\n  const web3 = new Web3(window.ethereum);\n  const result = await web3.eth.getBalance(process.env.VUE_APP_CONTRACT_ADR);\n\n  return web3.utils.fromWei(result, 'ether')\n}\n\nexport const request_totalSupply = async () => {\n  await initContract()\n  return nftContract.methods.totalSupply().call()\n}\n\nexport const request_nftLimit = async () => {\n  await initContract()\n  return nftContract.methods.MAX_MINTABLE().call()\n}\n\nexport const request_nftPrice = async () => {\n  await initContract()\n  const web3 = new Web3(window.ethereum)\n  const price = await nftContract.methods.NFT_PRICE().call()\n\n  return web3.utils.fromWei(`${price}`, 'ether')\n}\n\nexport const getTokensByAddress = async (address) => {\n  await initContract()\n  const array = await nftContract.methods.tokensByAddress(address).call()\n    return array\n}\n\nexport const getTokenURI = async (param) => {\n  await initContract()\n  const response = await nftContract.methods.tokenURI(param).call()\n\n  return response\n}\n\n\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport { Navbar, Nav, Button } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { init, connectWallet, checkConnection , switchChain , checkNetwork} from \"../lib/web3\";\n\nconst Header = () => {\n  const [address, setAddress] = useState('');\n  const [network, setnetwork] = useState('');\n\n  useEffect(() => {\n    init()\n    checkAddress()\n    checkNetwork1()\n  },[]);\n\n  const switchNetwork = async () => {\n   await switchChain()\n  }\n\n  const checkNetwork1 = async () => {\n    const network = await checkNetwork()\n    setnetwork(network)\n   }\n   \n  const checkAddress = async () => {\n    const address = await checkConnection()\n    setAddress(address)\n  }\n\n  const storeAddress = async () => {\n      const address = await connectWallet()\n      setAddress(address)\n  }\n\n  const disconnect = async () => {\n      console.log(\"disconnect\")\n  }\n\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <LinkContainer to=\"/\">\n        <Navbar.Brand>Home</Navbar.Brand>\n      </LinkContainer>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n\n        <Nav className=\"mr-auto\">\n        <LinkContainer to=\"./leaf\">\n            <Nav.Link>Leaf</Nav.Link>\n          </LinkContainer>\n          <LinkContainer to=\"./nft\">\n            <Nav.Link>NFT</Nav.Link>\n          </LinkContainer>\n\n          <LinkContainer to=\"./service\">\n            <Nav.Link>Service</Nav.Link>\n          </LinkContainer>\n          <LinkContainer to=\"./about\">\n            <Nav.Link>About</Nav.Link>\n          </LinkContainer>\n\n        </Nav>\n\n        {address && network != \"avax\" &&\n          <Button onClick={() => switchNetwork()}>\n             Switch Network\n           </Button>\n        }\n\n        {address && network === \"avax\" &&\n          <Button onClick={() => disconnect()}>\n             {address.substr(21)}{\" ...\"}\n           </Button>\n        }\n\n        {!address &&\n          <Button onClick={() => storeAddress()}>\n             Connect\n           </Button>\n        }\n    \n\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n\nexport default Header\n","import React from 'react'\n\nconst service = () => {\n    return (\n        <div>\n            <h1>This is Service Page</h1>\n        </div>\n    )\n}\n\nexport default service\n","import React from 'react'\n\nconst About = () => {\n    return (\n        <div>\n            <h1>This is About Page</h1>\n        </div>\n    )\n}\n\nexport default About\n","export default __webpack_public_path__ + \"static/media/tree.b35c35f5.png\";","import React, { useState, useEffect } from 'react'\nimport { Row, Col, Container, Card, Button } from 'react-bootstrap'\nimport tree from '../assets/img/tree.png'\nimport {\n  request_mintNft,\n  request_totalSupply,\n  request_nftLimit,\n  request_nftPrice,\n  checkConnection,\n  getTokenURI,\n  getTokensByAddress,\n  connectWallet,\nswitchChain,\ncheckNetwork\n} from '../lib/web3'\nimport axios from 'axios'\n\nconst NFT = () => {\n  const [totalSupply, setTotalSupply] = useState(0)\n  const [limit, setLimit] = useState(0)\n  const [price, setPrice] = useState(0)\n  const [loading, setLoading] = useState(false)\n  const [address, setAddress] = useState('')\n  const [network, setnetwork] = useState('')\n\n  const [list, setlist] = useState([])\n  const [nftList, setnftList] = useState([])\n\n  useEffect(() => {\n    getPrice()\n    getLimit()\n    getTotalSupply()\n    getTokens()\n    checkAddress()\n    checkNetwork1()\n  }, [])\n\n  useEffect(() => {\n    getTokens()\n  }, [address])\n\n  useEffect(() => {\n    getMetadatas()\n  }, [list])\n\n  const getMetadatas = async () => {\n    var ok = []\n\n    for (let i=0; i < list.length; i++) {\n        await axios.get(list[i], { responseType: 'json' }).then((response) => {\n            ok.push(response.data)\n          }).catch(() => {});\n    }\n    setnftList(ok)\n  }\n\n  const checkNetwork1 = async () => {\n    const network = await checkNetwork()\n    setnetwork(network)\n   }\n \n  const switchNetwork = async () => {\n    await switchChain()\n   }\n \n   const storeAddress = async () => {\n       const address = await connectWallet()\n       setAddress(address)\n   }\n\n  const checkAddress = async () => {\n    const address = await checkConnection()\n    setAddress(address)\n  }\n\n  const getPrice = async () => {\n    const price = await request_nftPrice()\n    setPrice(price)\n  }\n\n  const getLimit = async () => {\n    const limit = await request_nftLimit()\n    setLimit(limit)\n  }\n\n  const getTotalSupply = async () => {\n    const total = await request_totalSupply()\n    setTotalSupply(total)\n  }\n\n  const mint = async () => {\n    setLoading(true)\n    const ok = await request_mintNft(1, price)\n    console.log(ok)\n    getTotalSupply()\n    getTokens()\n    setLoading(false)\n  }\n\n  const getTokens = async () => {\n    var urls = []\n    if (address && network === \"avax\") {\n      const array = await getTokensByAddress(address)\n\n      array.forEach(async (element) => {\n        let response = await getTokenURI(element)\n        var responseFormat = response.substr(7)\n        urls.push('https://ipfs.io/ipfs/' + responseFormat)\n        setlist(urls)\n      })\n    }\n  }\n\n  return (\n    <Container>\n        {list.length > 0 ? (\n             <Row className=\"marketPlaceTree\">\n          {nftList.map((item, i) => (\n              <Col\n              xs={12}\n              md={8}\n              lg={8}\n              className=\"d-flex justify-content-center nftLeaf\"\n              style={{ marginTop: '20px' }}\n            >\n              <Card key={i}>\n                <Card.Img variant=\"top\" src={item.image} />\n                <Card.Body>\n                  <Card.Title>{item.name}</Card.Title>\n                  <Card.Text>{item.description}</Card.Text>\n                  <div className=\"d-flex justify-content-center\">\n                    {/* <Button\n                        disabled={loading}\n                        variant=\"primary\"\n                        onClick={() => mint()}\n                    >\n                        Mint {price}{' '}\n                    </Button> */}\n                  </div>\n                </Card.Body>\n              </Card>\n              </Col>\n          ))}\n        \n          </Row>\n        ) : (\n            <Row>\n                <h1>Mint your first tree</h1>\n            <Col\n                  className=\"d-flex justify-content-center\"\n                  style={{ marginTop: '20px' }}\n                >\n            <Card style={{ width: '18rem' }}>\n              <Card.Img variant=\"top\" src={tree} />\n              <Card.Body>\n                <Card.Title>Tree NFT</Card.Title>\n                <Card.Text>\n                  Ce LEAF TREE à déjà donné vie à 10 arbres dans le monde réel\n                  et si tu fais 10 000 pas aujourd'hui, il te donnera 6 LEAFs.\n                  Des LEAFs qui permettront de planter de nouveaux arbres. Alors\n                  lève toi et marche!\n                </Card.Text>\n                <div>{limit - totalSupply} / 10000 restant</div>\n                <br></br>\n                <div className=\"d-flex justify-content-center\">\n\n                \n                {address && network !== \"avax\" &&\n                  <Button onClick={() => switchNetwork()}>\n                    Switch Network\n                  </Button>\n                }\n\n                  {address && network === \"avax\" &&\n                    <Button\n                      disabled={loading}\n                      variant=\"primary\"\n                      onClick={() => mint()}\n                    >\n                      Mint {price}{' '}\n                    </Button>\n                  }\n\n                {!address &&\n                  <Button onClick={() => storeAddress()}>\n                    Connect\n                  </Button>\n                }\n    \n                </div>\n              </Card.Body>\n            </Card>\n            </Col>\n            </Row>\n        )}\n    </Container>\n  )\n}\n\nexport default NFT\n","import React from 'react'\n\nconst Leaf = () => {\n    return (\n        <div>\n            <h1>This is Leaf Page</h1>\n        </div>\n    )\n}\n\nexport default Leaf\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Header from './components/Header'\nimport Service from './components/Service'\nimport About from './components/About'\nimport Marketplace from './components/Marketplace'\nimport Leaf from './components/Leaf'\n\n\nReactDOM.render(\n  <React.StrictMode>\n       <Router>\n      <Header/>\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/service\" component={Service} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/nft\" component={Marketplace} />\n        <Route path=\"/leaf\" component={Leaf} />\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}